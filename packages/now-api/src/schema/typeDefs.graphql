scalar LocalDate

scalar ZonedDateTime

scalar GraphQLJSON

scalar Upload

scalar Name

scalar Birthdate

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [Edge!]!
}

type Query {
  allEvents: [Event!]!
  activity(id: ID!): Activity
  allActivities: [Activity!]!
  todayActivity: Activity
  event(id: ID!): Event
  rsvp(id: ID!): Rsvp
  currentUser: User!
  user(id: ID!): User
}

type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload
  addRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  removeRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  markEventChatRead(input: MarkEventChatReadInput!): MarkEventChatReadPayload
  createActivity(input: CreateActivityInput): CreateActivityPayload
  createMessage(input: CreateMessageInput): CreateMessagePayload
  setProfilePhoto(input: SetProfilePhotoInput): CreatePhotoPayload
  createUser(input: CreateUserInput): CreateUserPayload
  updateCurrentUser(input: UpdateCurrentUserInput): UpdateCurrentUserPayload
  registerDevice(input: RegisterDeviceInput): RegisterDevicePayload
  createReport(input: ReportInput!): ReportInputPayload
  blockUser(input: BlockUserInput): BlockUserPayload
}

type Subscription {
  messageAdded(eventId: ID!): EventMessagesEdge
  event(id: ID!): Event
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input ReportInput {
  data: GraphQLJSON!
}

type ReportInputPayload {
  data: GraphQLJSON!
}

input CreateRsvpInput {
  eventId: ID!
}

type CreateRsvpPayload {
  rsvp: Rsvp
  event: Event
}

input MarkEventChatReadInput {
  eventId: ID!
  ts: String!
}

type MarkEventChatReadPayload {
  rsvp: Rsvp
}

input BlockUserInput {
  blockedUserId: ID!
}

type BlockUserPayload {
  blockedUser: User
  blockingUser: User
}

input CreateEventInput {
  activityId: String!
  time: ZonedDateTime!
  limit: Int!
  location: LocationInput!
}

input CreateUserInput {
  email: String!
  meetupId: String @deprecated
  slackId: String @deprecated
  firstName: Name!
  lastName: Name!
  bio: String
  location: String
  preferences: GraphQLJSON
  birthday: Birthdate!
}

type CreateUserPayload {
  user: User
}

input UpdateCurrentUserInput {
  email: String
  meetupId: String @deprecated
  slackId: String @deprecated
  firstName: Name
  lastName: Name
  bio: String
  location: String
  preferences: GraphQLJSON
  birthday: Birthdate
}

type UpdateCurrentUserPayload {
  user: User
}

input LocationInput {
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
}

type CreateEventPayload {
  event: Event
}

input CreateActivityInput {
  title: String!
  description: String!
  emoji: String!
  activityDate: LocalDate!
}

type CreateActivityPayload {
  activity: Activity
}

input CreateMessageInput {
  text: String!
  eventId: ID!
  id: ID
}

type CreateMessagePayload {
  edge: EventMessagesEdge
}

type User {
  id: ID!
  email: String
  meetupId: String @deprecated
  slackId: String @deprecated
  firstName: Name
  lastName: Name
  bio: String
  location: String
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): UserRsvpsConnection!
  devices: [Device!]
  preferences: GraphQLJSON
  photo: Photo
  birthday: Birthdate
  age: Int
  # returns true if this user is the currently-authenticated user
  isSelf: Boolean!
  tosCurrent: Boolean
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Photo {
  id: ID!
  baseUrl: String
  type: String @deprecated
  preview: String
  blocked: Boolean
}

type UserRsvpsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [UserRsvpsEdge!]!
}

type UserRsvpsEdge implements Edge {
  cursor: String!
  node: Rsvp!
}

type Event implements Node {
  id: ID!
  time: ZonedDateTime
  activity: Activity
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): EventRsvpsConnection!
  messages(
    first: Int
    last: Int
    after: String
    before: String
  ): EventMessagesConnection!
  isAttending(userId: ID): Boolean
  limit: Int
  instigator: User
  location: Location!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  state: EventState!
}

enum EventState {
  PAST
  PRESENT
  FUTURE
}

type Location {
  id: ID!
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  activityDate: LocalDate
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  emoji: String
  events(
    first: Int
    last: Int
    after: String
    before: String
  ): ActivityEventsConnection!
}

type Rsvp implements Node {
  id: ID!
  user: User
  event: Event
  action: RsvpAction
  lastReadTs: String
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

enum RsvpAction {
  add
  remove
  flake
}

type RsvpLog {
  user: User
  event: Event
  time: ZonedDateTime
  action: RsvpAction
}

type EventRsvpsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [EventRsvpsEdge!]!
}

type EventRsvpsEdge implements Edge {
  cursor: String!
  node: Rsvp!
}

type EventMessagesConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [EventMessagesEdge!]!
}

type EventMessagesEdge implements Edge {
  cursor: String!
  node: Message!
}

type ActivityEventsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [ActivityEventsEdge!]!
}

type ActivityEventsEdge implements Edge {
  cursor: String!
  node: Event!
}

type Message implements Node {
  id: ID!
  text: String
  user: User
  event: Event
  ts: String
}

enum DeviceType {
  android
  ios
}

type Device {
  token: ID!
  type: DeviceType
  model: String
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  user: User
}

input RegisterDeviceInput {
  token: ID!
  type: DeviceType
  model: String
}

type RegisterDevicePayload {
  device: Device
}

input SetProfilePhotoInput {
  photo: Upload!
  main: Boolean
  syncPhoto: Boolean
}

type CreatePhotoPayload {
  photo: Photo
  user: User
}
