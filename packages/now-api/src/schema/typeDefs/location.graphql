type Query {
  location(id: ID!): Location
  manyLocations(ids: [ID!]!): [Location!]
  allLocations(
    input: AdminInput
    orderBy: LocationOrder
    prefix: String
  ): RootLocationsConnection! @admin
  weworkMarkets(type: String): [String!] @admin
}

type Mutation {
  syncWeworkMarket(market: String!): [Location!] @admin
  updateLocation(input: UpdateLocationInput!): UpdateLocationPayload @admin
  createLocation(input: CreateLocationInput!): UpdateLocationPayload @admin
}

type Location implements Node {
  id: ID!
  foursquareVenueId: String
  weworkId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  geojson: GraphQLJSON
}

enum LocationOrder {
  id
  lat
  lng
  address
  name
  crossStreet
  city
  state
  postalCode
  country
  neighborhood
  createdAt
  updatedAt
}

type RootLocationsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [RootLocationsEdge!]!
}

type RootLocationsEdge implements Edge {
  cursor: String!
  node: Location!
}

input CreateLocationInput {
  foursquareVenueId: String
  lat: Float
  lng: Float
  geojson: GraphQLJSON
  address: String
  name: String!
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
}

input UpdateLocationInput {
  id: ID!
  foursquareVenueId: String
  lat: Float
  lng: Float
  geojson: GraphQLJSON
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
}

type UpdateLocationPayload {
  location: Location
}
