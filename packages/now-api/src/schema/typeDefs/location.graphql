type Query {
  location(id: ID!): Location
  manyLocations(ids: [ID!]!): [Location!]
  allLocations(
    input: AdminInput
    orderBy: LocationOrder
  ): RootLocationsConnection! @admin
}

type Location implements Node {
  id: ID!
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  geojson: GraphQLJSON
}

enum LocationOrder {
  id
  lat
  lng
  address
  name
  crossStreet
  city
  state
  postalCode
  country
  neighborhood
  createdAt
  updatedAt
}

type RootLocationsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [RootLocationsEdge!]!
}

type RootLocationsEdge implements Edge {
  cursor: String!
  node: Location!
}

input LocationInput {
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
}
