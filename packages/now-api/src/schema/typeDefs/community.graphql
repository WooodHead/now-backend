type Query {
  allCommunities(
    input: AdminInput
    order: CommunityOrder
  ): RootCommunitiesConnection @admin
  community(id: ID!): Community
  manyCommunities(ids: [ID!]!): [Community!]! @admin
}

type Mutation {
  createCommunity(input: CreateCommunityInput!): CreateCommunityPayload @admin
  updateCommunity(input: UpdateCommunityInput!): CreateCommunityPayload @admin
  createMembership(input: CreateMembershipInput!): CreateMembershipPayload
    @admin
  removeMembership(input: CreateMembershipInput!): CreateMembershipPayload
    @admin
}

type Community implements Node {
  id: ID!
  name: String
  users(input: AdminInput): CommunityUsersConnection! @admin
  events: CommunityEventsConnection!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type CommunityUsersConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [CommunityUsersEdge!]!
}

type CommunityUsersEdge implements Edge {
  cursor: String!
  node: User!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type CommunityEventsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [CommunityEventsEdge!]!
}

type CommunityEventsEdge implements Edge {
  cursor: String!
  node: Event!
}

enum CommunityOrder {
  id
  name
  createdAt
}

type RootCommunitiesConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [RootCommunitiesEdge!]!
}

type RootCommunitiesEdge implements Edge {
  cursor: String!
  node: Community!
}

type CreateCommunityPayload {
  community: Community
}

input CreateCommunityInput {
  name: String!
}

input UpdateCommunityInput {
  id: ID!
  name: String
}

input CreateMembershipInput {
  userId: ID!
  communityId: ID!
}

type CreateMembershipPayload {
  user: User
  community: Community @admin
}
