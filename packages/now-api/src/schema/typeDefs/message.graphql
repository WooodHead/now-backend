type Query {
  messages(eventId: ID!): EventMessagesConnection!
}

type Mutation {
  createMessage(input: CreateMessageInput): CreateMessagePayload
  createBotMessage(input: CreateMessageInput): CreateMessagePayload @admin
}

type Subscription {
  messageAdded(eventId: ID!): EventMessagesEdge
  messages(eventId: ID!): EventMessagesConnection!
  # returns all new messages for any event to which the current user has RSVPed
  newMessage: EventMessagesEdge
}

type Message implements Node {
  id: ID!
  text: String
  user: User
  event: Event
  ts: String
}

input CreateMessageInput {
  text: String!
  eventId: ID!
  id: ID
}

type CreateMessagePayload {
  edge: EventMessagesEdge
}

type EventMessagesConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  unreadCount: Int!
  edges: [EventMessagesEdge!]!
}

type EventMessagesEdge implements Edge {
  cursor: String!
  node: Message!
}
