type Query {
  serverMessages: ServerMessages
  hostGuidelines: HostGuidelines!

  adminMessage(id: ID!): AdminMessage @admin
  manyAdminMessages(ids: [ID!]!): [AdminMessage!] @admin
  allAdminMessages(input: AdminInput): AdminMessagesConnection! @admin
}

type Mutation {
  updateAdminMessage(
    input: UpdateAdminMessageInput!
  ): UpdateAdminMessagePayload @admin
}

type ServerMessages {
  noActivityTitle: String
  noActivityMessage: String
  inviteExplain: String
  inviteExpire: String
  inviteInstructions: String
  categoriesHeading: String
  categoriesSubheading: String
  featureVideo: String
  featureThumbnail: Photo
}

type AdminMessage implements Node {
  id: ID!
  key: String!
  text: String
  json: GraphQLJSON
  createdAt: ZonedDateTime!
  updatedAt: ZonedDateTime!
}

type AdminMessagesConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [AdminMessagesEdge!]!
}

type AdminMessagesEdge implements Edge {
  cursor: String!
  node: AdminMessage!
}

input UpdateAdminMessageInput {
  id: ID!
  text: String
  json: GraphQLJSON
}

type UpdateAdminMessagePayload {
  adminMessage: AdminMessage
}

type HostGuidelinesBullet {
  id: ID!
  imageName: String
  title: String
  description: String
}

type HostGuidelines {
  title: String
  description: String
  imageName: String
  howToHeading: String
  bullets: [HostGuidelinesBullet]
  conclusion: String
  buttonText: String
}
