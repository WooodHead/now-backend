type Query {
  invitation(code: String, id: ID, eventId: ID): Invitation
  checkInvitation(code: String): InvitationCheck
  openAppInvitations(
    input: AdminInput
    orderBy: InvitationOrder
  ): AppInvitationConnection @admin
}

type Mutation {
  createAppInvitation(
    input: CreateAppInvitationInput!
  ): CreateAppInvitationPayload @admin
  createManyAppInvitations(
    input: CreateManyAppInvitationsInput!
  ): CreateManyAppInvitationsPayload @admin
  createEventInvitation(
    input: CreateEventInvitationInput!
  ): CreateAppInvitationPayload
}

interface Invitation {
  id: ID!
  code: String!
  inviter: User
  expiresAt: ZonedDateTime
  usedAt: ZonedDateTime
  createdAt: ZonedDateTime
  event: Event
  message: String
}

type InvitationCheck {
  code: String
  eventId: String
  type: String
}

type AppInvitation implements Invitation & Node {
  id: ID!
  code: String!
  inviter: User
  expiresAt: ZonedDateTime
  usedAt: ZonedDateTime
  createdAt: ZonedDateTime!
  notes: String
  event: Event
  message: String
}

type EventInvitation implements Invitation & Node {
  id: ID!
  code: String!
  inviter: User
  expiresAt: ZonedDateTime
  usedAt: ZonedDateTime
  createdAt: ZonedDateTime!
  event: Event
  message: String
}

enum InvitationOrder {
  id
  code
  expiresAt
  usedAt
  createdAt
  notes
  event
}

input CreateAppInvitationInput {
  notes: String
  expiresAt: ZonedDateTime
}

input CreateManyAppInvitationsInput {
  notes: [String]
  expiresAt: ZonedDateTime
}

input CreateEventInvitationInput {
  eventId: String!
}

type CreateAppInvitationPayload {
  invitation: Invitation
}

type CreateManyAppInvitationsPayload {
  invitations: [Invitation!]!
  codes: [String!]!
}

type AppInvitationConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [AppInvitationEdge!]!
}

type AppInvitationEdge implements Edge {
  cursor: String!
  node: AppInvitation!
}
