type Query {
  template(id: ID): Template
  category(id: ID): Category
  categories: [Category!]!
  submission(id: ID): Submission
}

type Mutation {
  submitTemplate(input: SubmissionInput!): SubmitTemplatePayload
}

input SubmissionInput {
  templateId: String!
  responses: [ResponseInput!]!
}

input ResponseInput {
  fieldId: ID
  intValue: Int
  stringValue: String
  dateTimeValue: ZonedDateTime
  durationValue: Int
  minValue: Int
  maxValue: Int
  locationNameValue: String
  locationAddressValue: String
}

type SubmitTemplatePayload {
  submission: Submission
}

type Category {
  id: ID!
  title: String
  description: String
  icon: Photo
  templates: [Template!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Template {
  id: ID!
  title: String
  description: String
  header: Photo
  eventWho: Field
  eventWhat: Field
  eventWhere: Field
  eventWhen: Field
  eventHow: Field
  eventSize: Field
  eventTitle: Field
  fieldOrder: [String!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Field {
  id: ID!
  type: FieldType
  defaultValue: FieldValue @deprecated
  params: GraphQLJSON
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Submission {
  id: ID!
  template: Template
  user: User
  responses: [Response!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Response {
  field: Field
  value: FieldValue
}

type StringFieldValue {
  value: String
}
type IntFieldValue {
  value: Int
}
type DateTimeFieldValue {
  value: ZonedDateTime
  duration: Int
}

union FieldValue = StringFieldValue | IntFieldValue | DateTimeFieldValue

enum FieldType {
  Text
  NumberRange
  Location
  DateTimeDuration
}
