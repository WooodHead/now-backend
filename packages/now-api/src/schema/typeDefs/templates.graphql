type Query {
  template(id: ID): Template
  category(id: ID): Category
  categories: [Category!]!
  allCategories(
    input: AdminInput
    orderBy: CategoryOrder
  ): RootCategoryConnection! @admin
  submission(id: ID): Submission
  allSubmissions(
    input: AdminInput
    orderBy: SubmissionOrder
  ): RootSubmissionsConnection! @admin
  manySubmissions(ids: [ID!]!): [Submission!]!
}

type Mutation {
  submitTemplate(input: SubmissionInput!): SubmitTemplatePayload
}

input SubmissionInput {
  templateId: String!
  responses: [ResponseInput!]!
}

input ResponseInput {
  fieldId: ID
  intValue: Int
  stringValue: String
  dateTimeValue: ZonedDateTime
  durationValue: Int
  minValue: Int
  maxValue: Int
  locationNameValue: String
  locationAddressValue: String
}

type SubmitTemplatePayload {
  submission: Submission
}

type Category implements Node {
  id: ID!
  title: String
  description: String
  icon: Photo
  templates: [Template!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type RootCategoryConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [RootCategoryEdge!]!
}

type RootCategoryEdge implements Edge {
  cursor: String!
  node: Category!
}

type Template {
  id: ID!
  title: String
  description: String
  header: Photo
  eventWho: Field
  eventWhat: Field
  eventWhere: Field
  eventWhen: Field
  eventHow: Field
  eventSize: Field
  eventTitle: Field
  fieldOrder: [String!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Field {
  id: ID!
  type: FieldType
  defaultValue: FieldValue @deprecated
  params: GraphQLJSON
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
}

type Submission implements Node {
  id: ID!
  template: Template
  user: User
  responses: [Response!]!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  formattedResponse: String
}

type Response {
  id: ID!
  field: Field
  value: FieldValue
}

type StringFieldValue {
  value: String
}
type IntFieldValue {
  value: Int
}
type DateTimeFieldValue {
  value: ZonedDateTime
  duration: Int
}
type RangeFieldValue {
  min: Int
  max: Int
}
type LocationFieldValue {
  name: String
  address: String
}

union FieldValue =
    StringFieldValue
  | IntFieldValue
  | RangeFieldValue
  | DateTimeFieldValue
  | LocationFieldValue

enum FieldType {
  Text
  NumberRange
  Location
  DateTimeDuration
}

type RootSubmissionsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [RootSubmissionsEdge!]!
}

type RootSubmissionsEdge implements Edge {
  cursor: String!
  node: Submission!
}

enum SubmissionOrder {
  id
  createdAt
  updatedAt
}

enum CategoryOrder {
  id
  title
}
