type Query {
  allEvents(input: AdminInput, orderBy: EventOrder): RootEventsConnection!
  # Returns the events that a user can see
  events(input: AdminInput, orderBy: EventOrder): RootEventsConnection!
  manyEvents(ids: [ID!]!): [Event!]
  event(id: ID!): Event
}

type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload @admin
  updateEvent(input: UpdateEventInput!): CreateEventPayload @admin
  markEventChatRead(input: MarkEventChatReadInput!): MarkEventChatReadPayload
}

type Subscription {
  event(id: ID!): Event
}

enum EventOrder {
  id
  time
  activity
  limit
  createdAt
  updatedAt
  state
}

input CreateEventInput {
  activityId: ID!
  time: ZonedDateTime!
  timezone: ZoneId!
  limit: Int!
  locationId: ID!
}

input UpdateEventInput {
  id: ID!
  activityId: ID!
  time: ZonedDateTime!
  timezone: ZoneId!
  limit: Int!
  locationId: ID!
}

type CreateEventPayload {
  event: Event
}

type Event implements Node {
  id: ID!
  time: ZonedDateTime
  activity: Activity
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): EventRsvpsConnection!
  messages(
    first: Int
    last: Int
    after: String
    before: String
  ): EventMessagesConnection!
  isAttending(userId: ID): Boolean
  hasInvited(userId: ID): Boolean
  limit: Int
  instigator: User
  location: Location!
  createdAt: ZonedDateTime
  updatedAt: ZonedDateTime
  state: EventState!
  timezone: ZoneId
  deletedUsers: Int
}

type RootEventsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [RootEventsEdge!]!
}

type RootEventsEdge implements Edge {
  cursor: String!
  node: Event!
}

enum EventState {
  PAST
  PRESENT
  FUTURE
}

input MarkEventChatReadInput {
  eventId: ID!
  ts: String!
}

type MarkEventChatReadPayload {
  rsvp: Rsvp @deprecated
  event: Event
}

type EventRsvpsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [EventRsvpsEdge!]!
}

type EventRsvpsEdge implements Edge {
  cursor: String!
  node: Rsvp!
}
