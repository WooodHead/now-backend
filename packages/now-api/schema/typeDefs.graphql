scalar GraphQLDate

scalar GraphQLTime

scalar GraphQLDateTime

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [Edge!]!
}

type Query {
  allEvents: [Event]
  activity(id: ID!): Activity
  allActivities: [Activity]
  todayActivity: Activity
  event(id: ID!): Event
  rsvp(id: ID!): Rsvp
  currentUser: User
  user(id: ID!): User
}

type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload
  addRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  removeRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  createActivity(input: CreateActivityInput): CreateActivityPayload
  createMessage(input: CreateMessageInput): CreateMessagePayload
}

type Subscription {
  messageAdded(eventId: ID!): EventMessagesEdge
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input CreateRsvpInput {
  eventId: ID!
}

type CreateRsvpPayload {
  rsvp: Rsvp
  event: Event
}

input CreateEventInput {
  activityId: String!
  time: GraphQLDateTime!
  limit: Int!
  location: LocationInput!
}

input LocationInput {
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
}

type CreateEventPayload {
  event: Event
}

input CreateActivityInput {
  title: String!
  description: String!
  emoji: String!
  activityDate: GraphQLDate!
}

type CreateActivityPayload {
  activity: Activity
}

input CreateMessageInput {
  text: String!
  eventId: ID!
}

type CreateMessagePayload {
  message: Message
}

type User {
  id: ID!
  email: String
  meetupId: String
  slackId: String
  firstName: String
  lastName: String
  bio: String
  location: String
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): UserRsvpsConnection!
  devices: [Device]
  preferences: [Preference]
  photo: Photo
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Photo {
  id: ID!
  highresLink: String @deprecated
  photoLink: String @deprecated
  thumbLink: String @deprecated
  baseUrl: String
  type: String
}

type UserRsvpsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [UserRsvpsEdge!]!
}

type UserRsvpsEdge implements Edge {
  cursor: String!
  node: Rsvp!
}

type Event implements Node {
  id: ID!
  time: GraphQLDateTime
  activity: Activity
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): EventRsvpsConnection!
  messages(
    first: Int
    last: Int
    after: String
    before: String
  ): EventMessagesConnection!
  isAttending(userId: ID): Boolean
  limit: Int
  instigator: User
  location: Location!
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Location {
  id: ID!
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  name: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  neighborhood: String
  isFuzzed: Boolean
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum ReminderType {
  oneHour
  tenMinutes
}

type Reminder {
  type: ReminderType
  sent: Boolean
  sentDate: GraphQLDateTime
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  activityDate: GraphQLDate
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
  emoji: String
  events(
    first: Int
    last: Int
    after: String
    before: String
  ): ActivityEventsConnection!
}

type Rsvp implements Node {
  id: ID!
  user: User
  event: Event
  action: RsvpAction
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum RsvpAction {
  add
  remove
  flake
}

type RsvpLog {
  user: User
  event: Event
  time: GraphQLDateTime
  action: RsvpAction
}

type EventRsvpsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [EventRsvpsEdge!]!
}

type EventRsvpsEdge implements Edge {
  cursor: String!
  node: Rsvp!
}

type EventMessagesConnection implements Connection {
  pageInfo: PageInfo!
  count: Int
  edges: [EventMessagesEdge!]!
}

type EventMessagesEdge implements Edge {
  cursor: String!
  node: Message!
}

type ActivityEventsConnection implements Connection {
  pageInfo: PageInfo!
  count: Int!
  edges: [ActivityEventsEdge!]!
}

type ActivityEventsEdge implements Edge {
  cursor: String!
  node: Event!
}

type Message implements Node {
  id: ID!
  text: String
  user: User
  event: Event
  ts: String
}

type Device {
  id: ID!
  type: String!
  token: String!
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Preference {
  id: ID!
  key: String!
  value: String
}
