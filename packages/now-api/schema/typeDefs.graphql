scalar GraphQLDate

scalar GraphQLTime

scalar GraphQLDateTime

type Query {
  allEvents: [Event]
  allTomorrowEvemts: [TomorrowEvent]
  event(id: ID): Event
}

type Mutation {
  createEvent(input: CreateEventInput): CreateEventPayload
  addUserToEvent(input: AddUserToEventInput): AddUserToEventPayload
  setReminderSent(input: SetReminderSentInput): SetReminderSentPayload
}

input CreateEventInput {
  activitySlug: String!
  postChannel: String!
  chatChannel: String!
  creatorId: String!
  time: GraphQLDateTime!
}

type CreateEventPayload {
  event: Event
}

input AddUserToEventInput {
  eventId: ID!
  slackId: String!
}

type AddUserToEventPayload {
  event: Event
}

input SetReminderSentInput {
  eventId: ID!
  type: ReminderType!
}

type SetReminderSentPayload {
  event: Event
}

type User {
  id: ID!
  email: String
  meetupId: String
  slackId: String
  events: [Event]
  tomorrowEvents: [TomorrowEvent]
  devices: [Device]
  preferences: [Preference]
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type TomorrowEvent {
  id: ID!
  time: GraphQLDateTime
  activity: Activity
  rsvps: [Rsvp]
  limit: Int
  instigator: User
  location: Location
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Location {
  id: ID!
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  isFuzzed: Boolean
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Event {
  id: ID!
  attendeeCount: Int
  chatChannel: String
  postChannel: String
  description: String
  limit: Int
  slug: String
  title: String
  duration: Int
  creator: User
  creatorId: String
  activity: ActivityTemplate
  attendees: [User]
  reminders: [Reminder]
  time: GraphQLDateTime
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum ReminderType {
  oneHour
  tenMinutes
}

type Reminder {
  type: ReminderType
  sent: Boolean
  sentDate: GraphQLDateTime
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

interface Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type ActivityTemplate implements Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type TomorrowActivity implements Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Rsvp {
  id: ID!
  user: User
  event: Event
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum RsvpAction {
  add
  remove
  flake
}

type RsvpLog {
  user: User
  event: Event
  time: GraphQLDateTime
  action: RsvpAction
}

type Message {
  id: ID!
  text: String
  user: User
  event: Event
  ts: String
}

type Device {
  id: ID!
  type: String!
  token: String!
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Preference {
  id: ID!
  key: String!
  value: String
}
