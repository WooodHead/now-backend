scalar GraphQLDate

scalar GraphQLTime

scalar GraphQLDateTime

type Query {
  allBotEvents: [BotEvent]
  allEvents: [Event]
  allActivityTemplates: [ActivityTemplate]
  template(id: ID!): ActivityTemplate
  event(id: ID!): Event
  rsvp(id: ID!): Rsvp
  events: Event
  botEvent(id: ID!): BotEvent
  currentUser: User
  user(id: ID!): User
}

type Mutation {
  createBotEvent(input: CreateBotEventInput): CreateBotEventPayload
  createEvent(input: CreateEventInput!): CreateEventPayload
  addRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  removeRsvp(input: CreateRsvpInput!): CreateRsvpPayload
  createActivityTemplate(
    input: CreateActivityTemplate
  ): CreateActivityTemplatePayload
  addUserToBotEvent(input: AddUserToBotEventInput): AddUserToBotEventPayload
  setBotEventReminderSent(
    input: SetBotEventReminderSentInput
  ): SetBotEventReminderSentPayload
  createMessage(input: CreateMessageInput): CreateMessagePayload
}

type Subscription {
  messageAdded(eventId: ID!): EventMessagesEdge
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input CreateRsvpInput {
  eventId: ID!
}

type CreateRsvpPayload {
  rsvp: Rsvp
}

input CreateBotEventInput {
  activitySlug: String!
  postChannel: String!
  chatChannel: String!
  creatorId: String!
  time: GraphQLDateTime!
}

input CreateEventInput {
  templateId: String!
  time: GraphQLDateTime!
}

type CreateEventPayload {
  event: Event
}

type CreateBotEventPayload {
  event: Event
}

input CreateActivityTemplate {
  title: String!
  description: String!
  duration: Int
}

type CreateActivityTemplatePayload {
  template: ActivityTemplate
}

input CreateMessageInput {
  text: String!
  eventId: ID!
}

type CreateMessagePayload {
  message: Message
}

input AddUserToBotEventInput {
  eventId: ID!
  slackId: String!
}

type AddUserToBotEventPayload {
  event: Event
}

input SetBotEventReminderSentInput {
  eventId: ID!
  type: ReminderType!
}

type SetBotEventReminderSentPayload {
  event: Event
}

type User {
  id: ID!
  email: String
  meetupId: String
  slackId: String
  events(
    first: Int
    last: Int
    after: String
    before: String
  ): UserEventsConnection
  devices: [Device]
  preferences: [Preference]
  photo: Photo
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Photo {
  highresLink: String
  photoLink: String
  thumbLink: String
}

type UserEventsConnection {
  pageInfo: PageInfo!
  edges: [UserEventsEdge]
}

type UserEventsEdge {
  cursor: String!
  node: Event
  messages(
    first: Int
    last: Int
    after: String
    before: String
  ): EventMessagesConnection
}

type Event {
  id: ID!
  time: GraphQLDateTime
  activity: ActivityTemplate
  rsvps(
    first: Int
    last: Int
    after: String
    before: String
  ): EventRsvpsConnection
  messages(
    first: Int
    last: Int
    after: String
    before: String
  ): EventMessagesConnection
  isAttending(userId: ID): Boolean
  limit: Int
  instigator: User
  location: Location
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Location {
  id: ID!
  foursquareVenueId: String
  lat: Float!
  lng: Float!
  address: String
  crossStreet: String
  city: String
  state: String
  postalCode: String
  country: String
  isFuzzed: Boolean
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type BotEvent {
  id: ID!
  attendeeCount: Int
  chatChannel: String
  postChannel: String
  description: String
  limit: Int
  slug: String
  title: String
  duration: Int
  creator: User
  creatorId: String
  activity: ActivityTemplate
  attendees: [User]
  reminders: [Reminder]
  time: GraphQLDateTime
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum ReminderType {
  oneHour
  tenMinutes
}

type Reminder {
  type: ReminderType
  sent: Boolean
  sentDate: GraphQLDateTime
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

interface Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type ActivityTemplate implements Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type EventActivity implements Activity {
  id: ID!
  title: String
  slug: String
  description: String
  duration: String
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Rsvp {
  id: ID!
  user: User
  event: Event
  action: RsvpAction
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

enum RsvpAction {
  add
  remove
  flake
}

type RsvpLog {
  user: User
  event: Event
  time: GraphQLDateTime
  action: RsvpAction
}

type EventRsvpsConnection {
  pageInfo: PageInfo!
  edges: [EventRsvpsEdge]
}

type EventRsvpsEdge {
  cursor: String!
  node: Rsvp
}

type EventMessagesConnection {
  pageInfo: PageInfo!
  edges: [EventMessagesEdge]
}

type EventMessagesEdge {
  cursor: String!
  node: Message
}

type Message {
  id: ID!
  text: String
  user: User
  event: Event
  ts: String
}

type Device {
  id: ID!
  type: String!
  token: String!
  createdAt: GraphQLDateTime
  updatedAt: GraphQLDateTime
}

type Preference {
  id: ID!
  key: String!
  value: String
}
